// src/pages/Register.jsx
import React, { useState, useEffect, useContext } from "react";
import { useLocation, Link, useNavigate } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import {
  User,
  Mail,
  Lock,
  Stethoscope,
  Building2,
  UserCircle,
  HeartPulse,
  Calendar,
  UserSquare,
  Languages,
} from "lucide-react";
import { LanguageContext } from "../context/LanguageContext";

const LANGS = {
  en: {
    title: "Create Account",
    subtitle: "Register as",
    in: "in MediLink360",
    selectRole: "Select Role",
    patient: "Patient",
    doctor: "Doctor",
    hospital: "Hospital Admin",
    name: "Full Name",
    email: "Email Address",
    password: "Password",
    confirmPassword: "Confirm Password",
    registeringFor: "Registering For",
    self: "Myself",
    family: "Family Member",
    relation: "Relation (e.g., Father, Mother, Child)",
    gender: "Gender",
    male: "Male ‚ôÇ",
    female: "Female ‚ôÄ",
    other: "Other",
    dob: "Date of Birth",
    bloodGroup: "Blood Group",
    chronic: "Chronic Conditions",
    otherCondition: "Other condition...",
    allergies: "Known Allergies",
    otherAllergy: "Other allergy...",
    specialization: "Specialization",
    license: "Medical License ID",
    hospitalName: "Hospital Name",
    hospitalCode: "Hospital Code / Reg No.",
    register: "Register",
    already: "Already have an account?",
    login: "Login here",
  },
  hi: {
    title: "‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç",
    subtitle: "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç",
    in: "‡§Æ‡•á‡§Ç MediLink360",
    selectRole: "‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
    patient: "‡§∞‡•ã‡§ó‡•Ä",
    doctor: "‡§°‡•â‡§ï‡•ç‡§ü‡§∞",
    hospital: "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï",
    name: "‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ",
    email: "‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ",
    password: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§°",
    confirmPassword: "‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•Ä ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç",
    registeringFor: "‡§ï‡§ø‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
    self: "‡§∏‡•ç‡§µ‡§Ø‡§Ç",
    family: "‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø",
    relation: "‡§∏‡§Ç‡§¨‡§Ç‡§ß (‡§ú‡•à‡§∏‡•á ‡§™‡§ø‡§§‡§æ, ‡§Æ‡§æ‡§§‡§æ, ‡§¨‡§ö‡•ç‡§ö‡§æ)",
    gender: "‡§≤‡§ø‡§Ç‡§ó",
    male: "‡§™‡•Å‡§∞‡•Å‡§∑ ‚ôÇ",
    female: "‡§Æ‡§π‡§ø‡§≤‡§æ ‚ôÄ",
    other: "‡§Ö‡§®‡•ç‡§Ø",
    dob: "‡§ú‡§®‡•ç‡§Æ ‡§§‡§ø‡§•‡§ø",
    bloodGroup: "‡§∞‡§ï‡•ç‡§§ ‡§∏‡§Æ‡•Ç‡§π",
    chronic: "‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡§ø‡§ï ‡§∞‡•ã‡§ó",
    otherCondition: "‡§Ö‡§®‡•ç‡§Ø ‡§∞‡•ã‡§ó...",
    allergies: "‡§ú‡•ç‡§û‡§æ‡§§ ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä",
    otherAllergy: "‡§Ö‡§®‡•ç‡§Ø ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä...",
    specialization: "‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ",
    license: "‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏ ‡§Ü‡§à‡§°‡•Ä",
    hospitalName: "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ",
    hospitalCode: "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡•ã‡§° / ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
    register: "‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§ï‡§∞‡•á‡§Ç",
    already: "‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ñ‡§æ‡§§‡§æ ‡§π‡•à?",
    login: "‡§Ø‡§π‡§æ‡§Å ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç",
  },
  ta: {
    title: "‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
    subtitle: "‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æµ‡ØÅ‡ÆÆ‡Øç",
    in: "MediLink360 ‡Æá‡Æ≤‡Øç",
    selectRole: "‡Æ™‡Æô‡Øç‡Æï‡ØÅ ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ",
    patient: "‡Æ®‡Øã‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç",
    doctor: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç",
    hospital: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø",
    name: "‡ÆÆ‡ØÅ‡Æ¥‡ØÅ‡Æ™‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
    email: "‡ÆÆ‡Æø‡Æ©‡Øç‡Æ©‡Æû‡Øç‡Æö‡Æ≤‡Øç ‡ÆÆ‡ØÅ‡Æï‡Æµ‡Æ∞‡Æø",
    password: "‡Æï‡Æü‡Æµ‡ØÅ‡Æö‡Øç‡Æö‡Øä‡Æ≤‡Øç",
    confirmPassword: "‡Æï‡Æü‡Æµ‡ØÅ‡Æö‡Øç‡Æö‡Øä‡Æ≤‡Øç‡Æ≤‡Øà ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç",
    registeringFor: "‡ÆØ‡Ææ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æï ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç",
    self: "‡Æ®‡Ææ‡Æ©‡Øç",
    family: "‡Æï‡ØÅ‡Æü‡ØÅ‡ÆÆ‡Øç‡Æ™ ‡Æâ‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æ©‡Æ∞‡Øç",
    relation: "‡Æâ‡Æ±‡Æµ‡ØÅ (‡Æâ‡Æ§‡Ææ: ‡Æ§‡Æ®‡Øç‡Æ§‡Øà, ‡Æ§‡Ææ‡ÆØ‡Øç, ‡Æï‡ØÅ‡Æ¥‡Æ®‡Øç‡Æ§‡Øà)",
    gender: "‡Æ™‡Ææ‡Æ≤‡Æø‡Æ©‡ÆÆ‡Øç",
    male: "‡ÆÜ‡Æ£‡Øç ‚ôÇ",
    female: "‡Æ™‡ØÜ‡Æ£‡Øç ‚ôÄ",
    other: "‡ÆÆ‡Æ±‡Øç‡Æ±‡Æµ‡Øà",
    dob: "‡Æ™‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æ§‡Øá‡Æ§‡Æø",
    bloodGroup: "‡Æá‡Æ∞‡Æ§‡Øç‡Æ§ ‡Æµ‡Æï‡Øà",
    chronic: "‡Æ®‡ØÄ‡Æ£‡Øç‡Æü‡Æ®‡Ææ‡Æ≥‡Øç ‡Æ®‡Øã‡ÆØ‡Øç‡Æï‡Æ≥‡Øç",
    otherCondition: "‡ÆÆ‡Æ±‡Øç‡Æ± ‡Æ®‡Øã‡ÆØ‡Øç...",
    allergies: "‡ÆÖ‡Æ±‡Æø‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æí‡Æµ‡Øç‡Æµ‡Ææ‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç",
    otherAllergy: "‡ÆÆ‡Æ±‡Øç‡Æ± ‡Æí‡Æµ‡Øç‡Æµ‡Ææ‡ÆÆ‡Øà...",
    specialization: "‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡Æø‡ÆØ‡Æ≤‡Øç",
    license: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æâ‡Æ∞‡Æø‡ÆÆ‡ÆÆ‡Øç ‡Æê‡Æü‡Æø",
    hospitalName: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç",
    hospitalCode: "‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ / ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æé‡Æ£‡Øç",
    register: "‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ",
    already: "‡Æè‡Æ±‡Øç‡Æï‡Æ©‡Æµ‡Øá ‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡Ææ?",
    login: "‡Æá‡Æô‡Øç‡Æï‡Øá ‡Æâ‡Æ≥‡Øç‡Æ®‡ØÅ‡Æ¥‡Øà‡Æï",
  },
};

export default function Register() {
  const location = useLocation();
  const navigate = useNavigate();
  const { lang, setLang } = useContext(LanguageContext);
  const t = LANGS[lang] || LANGS.en;

  const initialRole = location.state?.role || "patient";
  const [role, setRole] = useState(initialRole);

  const [form, setForm] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    registeringFor: "self",
    relation: "",
    gender: "",
    dob: "",
    bloodGroup: "",
    chronicConditions: "",
    allergies: "",
    specialization: "",
    licenseId: "",
    hospitalName: "",
    hospitalCode: "",
  });

  useEffect(() => {
    setRole(initialRole);
  }, [initialRole]);

  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = (e) => {
    e.preventDefault();
    if (form.password !== form.confirmPassword) {
      alert("‚ùå Passwords do not match!");
      return;
    }
    alert(`üéâ ${t.register} ${role}!`);
    navigate("/login", { state: { role } });
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-sky-50 via-white to-sky-100 px-4">
      <motion.div
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="w-full max-w-2xl bg-white rounded-2xl shadow-2xl p-6 sm:p-8 relative"
      >
        {/* Header */}
        <div className="text-center mb-6">
          <h2 className="text-2xl sm:text-3xl font-bold text-sky-700">
            {t.title}
          </h2>
          <p className="text-gray-600 text-sm mt-2">
            {t.subtitle}{" "}
            <span className="font-semibold capitalize">{role}</span> {t.in}
          </p>
        </div>

        {/* Role Selection */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            {t.selectRole}
          </label>
          <select
            value={role}
            onChange={(e) => setRole(e.target.value)}
            className="w-full border rounded-lg p-2 focus:ring-2 focus:ring-sky-400"
          >
            <option value="patient">{t.patient}</option>
            <option value="doctor">{t.doctor}</option>
            <option value="hospital">{t.hospital}</option>
          </select>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Name */}
          <div className="relative">
            <User className="absolute left-3 top-3 text-gray-400" size={18} />
            <input
              type="text"
              name="name"
              placeholder={t.name}
              value={form.name}
              onChange={handleChange}
              className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
              required
            />
          </div>

          {/* Email */}
          <div className="relative">
            <Mail className="absolute left-3 top-3 text-gray-400" size={18} />
            <input
              type="email"
              name="email"
              placeholder={t.email}
              value={form.email}
              onChange={handleChange}
              className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
              required
            />
          </div>

          {/* Password */}
          <div className="relative">
            <Lock className="absolute left-3 top-3 text-gray-400" size={18} />
            <input
              type="password"
              name="password"
              placeholder={t.password}
              value={form.password}
              onChange={handleChange}
              className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
              required
            />
          </div>

          {/* Confirm Password */}
          <div className="relative">
            <Lock className="absolute left-3 top-3 text-gray-400" size={18} />
            <input
              type="password"
              name="confirmPassword"
              placeholder={t.confirmPassword}
              value={form.confirmPassword}
              onChange={handleChange}
              className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
              required
            />
          </div>

          {/* Role Specific Fields */}
          <AnimatePresence mode="wait">
            {role === "patient" && (
              <motion.div
                key="patient"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-4"
              >
                {/* Registering for */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {t.registeringFor}
                  </label>
                  <select
                    name="registeringFor"
                    value={form.registeringFor}
                    onChange={handleChange}
                    className="w-full border rounded-lg p-2 focus:ring-2 focus:ring-sky-400"
                  >
                    <option value="self">{t.self}</option>
                    <option value="family">{t.family}</option>
                  </select>
                </div>

                {form.registeringFor === "family" && (
                  <div className="relative">
                    <UserSquare
                      className="absolute left-3 top-3 text-gray-400"
                      size={18}
                    />
                    <input
                      type="text"
                      name="relation"
                      placeholder={t.relation}
                      value={form.relation}
                      onChange={handleChange}
                      className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                      required
                    />
                  </div>
                )}

                {/* Gender */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {t.gender}
                  </label>
                  <select
                    name="gender"
                    value={form.gender}
                    onChange={handleChange}
                    className="w-full border rounded-lg p-2 focus:ring-2 focus:ring-sky-400"
                    required
                  >
                    <option value="">{t.gender}</option>
                    <option value="male">{t.male}</option>
                    <option value="female">{t.female}</option>
                    <option value="other">{t.other}</option>
                  </select>
                </div>

                {/* DOB */}
                <div className="relative">
                  <Calendar
                    className="absolute left-3 top-3 text-gray-400"
                    size={18}
                  />
                  <input
                    type="date"
                    name="dob"
                    value={form.dob}
                    onChange={handleChange}
                    className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                    required
                  />
                </div>

                {/* Blood Group */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {t.bloodGroup}
                  </label>
                  <select
                    name="bloodGroup"
                    value={form.bloodGroup}
                    onChange={handleChange}
                    className="w-full border rounded-lg p-2 focus:ring-2 focus:ring-sky-400"
                    required
                  >
                    <option value="">{t.bloodGroup}</option>
                    <option value="A+">A+</option>
                    <option value="A-">A-</option>
                    <option value="B+">B+</option>
                    <option value="B-">B-</option>
                    <option value="O+">O+</option>
                    <option value="O-">O-</option>
                    <option value="AB+">AB+</option>
                    <option value="AB-">AB-</option>
                  </select>
                </div>
              </motion.div>
            )}

            {role === "doctor" && (
              <motion.div
                key="doctor"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-4"
              >
                <div className="relative">
                  <Stethoscope
                    className="absolute left-3 top-3 text-gray-400"
                    size={18}
                  />
                  <input
                    type="text"
                    name="specialization"
                    placeholder={t.specialization}
                    value={form.specialization}
                    onChange={handleChange}
                    className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                    required
                  />
                </div>
                <div className="relative">
                  <UserCircle
                    className="absolute left-3 top-3 text-gray-400"
                    size={18}
                  />
                  <input
                    type="text"
                    name="licenseId"
                    placeholder={t.license}
                    value={form.licenseId}
                    onChange={handleChange}
                    className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                    required
                  />
                </div>
              </motion.div>
            )}

            {role === "hospital" && (
              <motion.div
                key="hospital"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.4 }}
                className="space-y-4"
              >
                <div className="relative">
                  <Building2
                    className="absolute left-3 top-3 text-gray-400"
                    size={18}
                  />
                  <input
                    type="text"
                    name="hospitalName"
                    placeholder={t.hospitalName}
                    value={form.hospitalName}
                    onChange={handleChange}
                    className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                    required
                  />
                </div>
                <div className="relative">
                  <Building2
                    className="absolute left-3 top-3 text-gray-400"
                    size={18}
                  />
                  <input
                    type="text"
                    name="hospitalCode"
                    placeholder={t.hospitalCode}
                    value={form.hospitalCode}
                    onChange={handleChange}
                    className="w-full pl-10 pr-3 py-2 border rounded-lg focus:ring-2 focus:ring-sky-400"
                    required
                  />
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Submit */}
          <button
            type="submit"
            className="w-full bg-sky-600 text-white py-2.5 rounded-lg hover:bg-sky-700 shadow-lg transition-all"
          >
            {t.register}
          </button>
        </form>

        {/* Login Link */}
        <p className="text-sm text-center text-gray-600 mt-6">
          {t.already}{" "}
          <Link
            to="/login"
            state={{ role }}
            className="text-sky-600 font-medium hover:underline"
          >
            {t.login}
          </Link>
        </p>
      </motion.div>
    </div>
  );
}
