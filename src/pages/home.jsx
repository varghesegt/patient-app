import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import { HeartPulse, Stethoscope, AlertTriangle, Users } from "lucide-react";

// ЁЯЧгя╕П Supported languages
const LANGS = {
  en: {
    appName: "MediLink360",
    tagline:
      "Your personal health assistant. Check symptoms, get instant emergency support, and connect with doctors тАФ all in one platform.",
    login: "Login",
    register: "Register",
    guest: "Continue as Guest",
    features: [
      { title: "Symptom Checker", desc: "AI-powered triage to guide your next steps.", icon: <HeartPulse className="mx-auto text-sky-500" size={40} /> },
      { title: "Emergency SOS", desc: "Get instant help and live ambulance tracking.", icon: <AlertTriangle className="mx-auto text-red-500" size={40} /> },
      { title: "Doctor Connect", desc: "Consult certified doctors online 24/7.", icon: <Stethoscope className="mx-auto text-green-500" size={40} /> },
      { title: "For Everyone", desc: "Patients, caregivers, or guests тАФ MediLink360 is here for you.", icon: <Users className="mx-auto text-purple-500" size={40} /> },
    ],
    footer: "Built for Better Health Access",
    chooseLang: "Choose Your Language",
  },
  hi: {
    appName: "рдореЗрдбрд┐рд▓рд┐рдВрдХ360",
    tagline:
      "рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХред рд▓рдХреНрд╖рдг рдЬрд╛рдВрдЪреЗрдВ, рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ рдкрд╛рдПрдВ рдФрд░ рдбреЙрдХреНрдЯрд░реЛрдВ рд╕реЗ рдЬреБрдбрд╝реЗрдВ тАФ рд╕рдм рдПрдХ рд╣реА рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рдкрд░ред",
    login: "рд▓реЙрдЧрд┐рди",
    register: "рд░рдЬрд┐рд╕реНрдЯрд░",
    guest: "рдЕрддрд┐рдерд┐ рдХреЗ рд░реВрдк рдореЗрдВ рдЬрд╛рд░реА рд░рдЦреЗрдВ",
    features: [
      { title: "рд▓рдХреНрд╖рдг рдЪреЗрдХрд░", desc: "AI рдЖрдзрд╛рд░рд┐рдд рдЬрд╛рдВрдЪ рдЬреЛ рдЖрдкрдХреЗ рдЕрдЧрд▓реЗ рдХрджрдореЛрдВ рдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░реЗрдЧреАред", icon: <HeartPulse className="mx-auto text-sky-500" size={40} /> },
      { title: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди SOS", desc: "рддреБрд░рдВрдд рдорджрдж рдкрд╛рдПрдВ рдФрд░ рд▓рд╛рдЗрд╡ рдПрдореНрдмреБрд▓реЗрдВрд╕ рдЯреНрд░реИрдХрд┐рдВрдЧред", icon: <AlertTriangle className="mx-auto text-red-500" size={40} /> },
      { title: "рдбреЙрдХреНрдЯрд░ рдХрдиреЗрдХреНрдЯ", desc: "24/7 рдкреНрд░рдорд╛рдгрд┐рдд рдбреЙрдХреНрдЯрд░реЛрдВ рд╕реЗ рдСрдирд▓рд╛рдЗрди рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВред", icon: <Stethoscope className="mx-auto text-green-500" size={40} /> },
      { title: "рд╕рдмрдХреЗ рд▓рд┐рдП", desc: "рдорд░реАрдЬ, рджреЗрдЦрднрд╛рд▓рдХрд░реНрддрд╛ рдпрд╛ рдЕрддрд┐рдерд┐ тАФ MediLink360 рдЖрдкрдХреЗ рд▓рд┐рдП рд╣реИред", icon: <Users className="mx-auto text-purple-500" size={40} /> },
    ],
    footer: "рдмреЗрд╣рддрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкрд╣реБрдВрдЪ рдХреЗ рд▓рд┐рдП рдирд┐рд░реНрдорд┐рдд",
    chooseLang: "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
  },
  ta: {
    appName: "роорпЖроЯро┐ро▓ро┐роЩрпНроХрпН360",
    tagline:
      "роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН. роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН, роЙроЯройроЯро┐ роЕро╡роЪро░ роЙродро╡ро┐ропрпИрокрпН рокрпЖро▒ро╡рпБроорпН, рооро░рпБродрпНродрпБро╡ро░рпНроХро│рпБроЯройрпН роЗрогрпИроХрпНроХро╡рпБроорпН тАФ роЕройрпИродрпНродрпБроорпН роТро░рпЗ родро│родрпНродро┐ро▓рпН.",
    login: "роЙро│рпНроирпБро┤рпИроп",
    register: "рокродро┐ро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
    guest: "ро╡ро┐ро░рпБроирпНродро┐ройро░ро╛роХ родрпКроЯро░ро╡рпБроорпН",
    features: [
      { title: "роЕро▒ро┐роХрпБро▒ро┐ рокро░ро┐роЪрпЛродроХро░рпН", desc: "роЕроЯрпБродрпНрод рокроЯро┐роХро│рпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБроорпН AI роЗропроХрпНроХроорпН.", icon: <HeartPulse className="mx-auto text-sky-500" size={40} /> },
      { title: "роЕро╡роЪро░ SOS", desc: "роЙроЯройроЯро┐ роЙродро╡ро┐ рооро▒рпНро▒рпБроорпН роирпЗро░роЯро┐ роЖроорпНрокрпБро▓ройрпНро╕рпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ.", icon: <AlertTriangle className="mx-auto text-red-500" size={40} /> },
      { title: "рооро░рпБродрпНродрпБро╡ро░рпН роЗрогрпИрокрпНрокрпБ", desc: "роЪро╛ройрпНро▒ро│ро┐роХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБродрпНродрпБро╡ро░рпНроХро│рпБроЯройрпН 24/7 роЖройрпНро▓рпИройрпН роЖро▓рпЛроЪройрпИ.", icon: <Stethoscope className="mx-auto text-green-500" size={40} /> },
      { title: "роЕройрпИро╡ро░рпБроХрпНроХрпБроорпН", desc: "роирпЛропро╛ро│ро┐роХро│рпН, рокро░ро╛рооро░ро┐рокрпНрокро╛ро│ро░рпНроХро│рпН роЕро▓рпНро▓родрпБ ро╡ро┐ро░рпБроирпНродро┐ройро░рпНроХро│рпН тАФ MediLink360 роЙроЩрпНроХро│рпБроХрпНроХро╛роХ.", icon: <Users className="mx-auto text-purple-500" size={40} /> },
    ],
    footer: "роЪро┐ро▒роирпНрод роЪрпБроХро╛родро╛ро░ роЕрогрпБроХро▓рпБроХрпНроХро╛роХ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ",
    chooseLang: "роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
  },
};

export default function Home() {
  const [lang, setLang] = useState(localStorage.getItem("lang") || null);

  // Auto-detect browser language
  useEffect(() => {
    if (!lang) {
      const browserLang = navigator.language.slice(0, 2);
      if (LANGS[browserLang]) setLang(browserLang);
    }
  }, [lang]);

  const chooseLanguage = (code) => {
    setLang(code);
    localStorage.setItem("lang", code);
  };

  const t = lang ? LANGS[lang] : LANGS.en;

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-sky-50 via-white to-sky-100 relative">
      {/* Language Modal */}
      <AnimatePresence>
        {!lang && (
          <motion.div
            className="fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
              className="bg-white rounded-3xl shadow-2xl p-8 max-w-sm text-center"
            >
              <h2 className="text-2xl font-bold text-sky-700 mb-6">ЁЯМР {t.chooseLang}</h2>
              <div className="flex flex-col gap-4">
                {Object.keys(LANGS).map((code) => (
                  <button
                    key={code}
                    onClick={() => chooseLanguage(code)}
                    className={`px-6 py-3 rounded-xl font-semibold text-white transition ${
                      code === "en" ? "bg-sky-600 hover:bg-sky-700" :
                      code === "hi" ? "bg-green-600 hover:bg-green-700" :
                      "bg-pink-600 hover:bg-pink-700"
                    }`}
                  >
                    {code === "en" ? "English" : code === "hi" ? "рд╣рд┐рдиреНрджреА" : "родрооро┐ро┤рпН"}
                  </button>
                ))}
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {lang && (
        <>
          {/* Floating Language Switcher */}
          <div className="absolute top-6 right-6 z-40 flex items-center gap-2 bg-white border rounded-lg shadow-md px-3 py-1 hover:shadow-lg transition">
            <span>ЁЯМР</span>
            <select
              value={lang}
              onChange={(e) => chooseLanguage(e.target.value)}
              className="bg-transparent focus:outline-none text-gray-700 font-medium cursor-pointer"
            >
              {Object.keys(LANGS).map((code) => (
                <option key={code} value={code}>
                  {code === "en" ? "English" : code === "hi" ? "рд╣рд┐рдиреНрджреА" : "родрооро┐ро┤рпН"}
                </option>
              ))}
            </select>
          </div>

          {/* Hero Section */}
          <section className="flex-1 flex flex-col justify-center items-center text-center px-6 py-24 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-tr from-blue-200/40 to-sky-100/20 blur-3xl -z-10" />

            <motion.h1
              initial={{ opacity: 0, y: -30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              className="text-5xl sm:text-6xl md:text-7xl font-extrabold text-sky-700 leading-tight"
            >
              {t.appName}
            </motion.h1>

            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4 }}
              className="mt-6 text-lg sm:text-xl md:text-2xl text-gray-700 max-w-3xl"
            >
              {t.tagline}
            </motion.p>

            {/* CTA Buttons */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.7 }}
              className="mt-12 flex flex-col sm:flex-row gap-5"
            >
              {["login", "register", "guest"].map((key, idx) => (
                <Link
                  key={key}
                  to={key === "guest" ? "#" : `/${key}`}
                  className={`px-6 py-3 rounded-xl font-semibold shadow-lg hover:scale-105 transition ${
                    key === "login"
                      ? "bg-sky-600 text-white hover:bg-sky-700"
                      : key === "register"
                      ? "border border-sky-600 text-sky-700 hover:bg-sky-50"
                      : "bg-yellow-500 text-white hover:bg-yellow-600"
                  }`}
                >
                  {t[key]}
                </Link>
              ))}
            </motion.div>
          </section>

          {/* Features Section */}
          <section className="bg-white py-20 px-6">
            <div className="max-w-6xl mx-auto grid gap-10 sm:grid-cols-2 lg:grid-cols-4 text-center">
              {t.features.map((f, i) => (
                <motion.div
                  key={i}
                  whileHover={{ scale: 1.05, y: -5 }}
                  transition={{ type: "spring", stiffness: 150 }}
                  className="p-6 bg-sky-50 rounded-xl shadow-md hover:shadow-xl transition"
                >
                  {f.icon}
                  <h3 className="mt-4 text-lg font-bold text-gray-900">{f.title}</h3>
                  <p className="mt-2 text-sm text-gray-600">{f.desc}</p>
                </motion.div>
              ))}
            </div>
          </section>

          {/* Footer */}
          <footer className="bg-sky-700 text-white py-6 text-center text-sm">
            <p>
              ┬й {new Date().getFullYear()} {t.appName}. <span className="font-semibold">{t.footer}</span>.
            </p>
          </footer>
        </>
      )}
    </div>
  );
}
