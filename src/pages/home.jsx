// src/pages/Home.jsx
import React, { useState, useEffect, useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import {
  HeartPulse,
  AlertTriangle,
  Hospital,
  Globe,
} from "lucide-react";
import { LanguageContext } from "../context/LanguageContext";

// === Multilingual Support ===
const LANGS = {
  en: {
    appName: "MediLink360",
    tagline:
      "Your personal health assistant. Check symptoms, get instant emergency support, and connect with doctors all in one platform.",
    login: "Login",
    register: "Register",
    guest: "Continue as Guest",
    quickAccess: "Quick Access (Guest Mode)",
    emergency: "Emergency SOS",
    symptoms: "Check Symptoms",
    hospital: "Nearby Hospitals",
    footer: "Built for Better Health Access",
    chooseLang: "Choose Your Language",
    install: "üì≤ Install MediLink360",
    iosTip: "üì≤ To install: Tap Share ‚Üí Add to Home Screen",
    offline: "is offline. Some features may be limited.",
  },
  hi: {
    appName: "‡§Æ‡•á‡§°‡•Ä ‡§≤‡§ø‡§Ç‡§ï 360",
    tagline:
      "‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç, ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§è‡§ï ‡§π‡•Ä ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§º‡•â‡§∞‡•ç‡§Æ ‡§™‡§∞‡•§",
    login: "‡§≤‡•â‡§ó‡§ø‡§®",
    register: "‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞",
    guest: "‡§Ö‡§§‡§ø‡§•‡§ø ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç",
    quickAccess: "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§™‡§π‡•Å‡§Å‡§ö (‡§ó‡•á‡§∏‡•ç‡§ü ‡§Æ‡•ã‡§°)",
    emergency: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® SOS",
    symptoms: "‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç",
    hospital: "‡§®‡§ú‡§º‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤",
    footer: "‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§π‡•Å‡§Å‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ",
    chooseLang: "‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
    install: "üì≤ ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç MediLink360",
    iosTip: "üì≤ ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§∂‡•á‡§Ø‡§∞ ‚Üí Add to Home Screen",
    offline: "‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§π‡•à‡•§ ‡§ï‡•Å‡§õ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Å ‡§∏‡•Ä‡§Æ‡§ø‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç‡•§",
  },
  ta: {
    appName: "‡ÆÆ‡ØÜ‡Æü‡Æø‡Æ≤‡Æø‡Æô‡Øç‡Æï‡Øç360",
    tagline:
      "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞ ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Øà ‡Æâ‡Æü‡Æ©‡Æü‡Æø‡ÆØ‡Ææ‡Æï‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æí‡Æ∞‡Øá ‡Æ§‡Æ≥‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç.",
    login: "‡Æâ‡Æ≥‡Øç‡Æ®‡ØÅ‡Æ¥‡Øà‡Æï",
    register: "‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï",
    guest: "‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æø‡Æ©‡Æ∞‡Ææ‡Æï ‡Æ§‡Øä‡Æü‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç",
    quickAccess: "‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Ææ‡Æ© ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Øç (‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Æø‡Æ©‡Æ∞‡Øç)",
    emergency: "‡ÆÖ‡Æµ‡Æö‡Æ∞ SOS",
    symptoms: "‡ÆÖ‡Æ±‡Æø‡Æï‡ØÅ‡Æ±‡Æø‡Æï‡Æ≥‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï",
    hospital: "‡ÆÖ‡Æ∞‡ØÅ‡Æï‡Æø‡Æ≤‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà‡Æï‡Æ≥‡Øç",
    footer: "‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞ ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æï ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ",
    chooseLang: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
    install: "üì≤ ‡Æ®‡Æø‡Æ±‡ØÅ‡Æµ‡ØÅ‡Æï MediLink360",
    iosTip: "üì≤ ‡Æ®‡Æø‡Æ±‡ØÅ‡Æµ: ‡Æ™‡Æï‡Æø‡Æ∞‡Øç‡Æµ‡ØÅ ‚Üí ‡ÆÆ‡ØÅ‡Æï‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æø‡Æ∞‡Øà‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡Øá‡Æ∞‡Øç",
    offline: "‡ÆÜ‡ÆÉ‡Æ™‡Øç‡Æ≤‡Øà‡Æ©‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æö‡Æø‡Æ≤ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Øá‡Æ≤‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Ææ‡ÆÆ‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æ≤‡Ææ‡ÆÆ‡Øç.",
  },
};

export default function Home() {
  const navigate = useNavigate();
  const { lang, setLang } = useContext(LanguageContext);

  // PWA states
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [showInstall, setShowInstall] = useState(false);
  const [showIosBanner, setShowIosBanner] = useState(false);
  const [isOffline, setIsOffline] = useState(!navigator.onLine);

  const t = LANGS[lang] || LANGS.en;

  // Detect browser language if none set
  useEffect(() => {
    if (!lang) {
      const browserLang = navigator.language.slice(0, 2);
      setLang(LANGS[browserLang] ? browserLang : "en");
    }
  }, [lang, setLang]);

  // Install + iOS handling
  useEffect(() => {
    const isIos = /iphone|ipad|ipod/.test(
      window.navigator.userAgent.toLowerCase()
    );
    const isInStandalone = window.navigator.standalone === true;

    if (isIos && !isInStandalone) {
      setShowIosBanner(true);
      setShowInstall(true);
    }

    const handler = (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowInstall(true);
    };

    window.addEventListener("beforeinstallprompt", handler);
    window.addEventListener("appinstalled", () => {
      console.log("‚úÖ MediLink360 installed");
      setShowInstall(false);
      setShowIosBanner(false);
    });

    const goOffline = () => setIsOffline(true);
    const goOnline = () => setIsOffline(false);

    window.addEventListener("offline", goOffline);
    window.addEventListener("online", goOnline);

    return () => {
      window.removeEventListener("beforeinstallprompt", handler);
      window.removeEventListener("offline", goOffline);
      window.removeEventListener("online", goOnline);
    };
  }, []);

  const handleInstall = async () => {
    if (deferredPrompt) {
      deferredPrompt.prompt();
      await deferredPrompt.userChoice;
      setDeferredPrompt(null);
      setShowInstall(false);
    } else if (showIosBanner) {
      alert(t.iosTip);
    }
  };

  const chooseLanguage = (code) => {
    setLang(code);
    localStorage.setItem("lang", code);
  };

  const enableGuestAndNavigate = (path) => {
    localStorage.setItem("guest", "true");
    navigate(path);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-sky-50 via-white to-sky-100 relative">
      {/* === Offline Banner === */}
<AnimatePresence>
  {isOffline && (
    <motion.div
      initial={{ y: -50, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      exit={{ y: -50, opacity: 0 }}
      className="fixed top-0 inset-x-0 bg-red-600 text-white py-2 px-4 flex items-center justify-between text-sm z-50"
    >
      <span>‚ö†Ô∏è {t.appName} {t.offline}</span>
      <button
        onClick={() => setIsOffline(false)}
        className="ml-4 text-white hover:text-gray-200 font-bold text-lg"
      >
        √ó
      </button>
    </motion.div>
  )}
</AnimatePresence>


      {/* === iOS Install Banner === */}
      <AnimatePresence>
        {showIosBanner && (
          <motion.div
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: 100, opacity: 0 }}
            className="fixed bottom-0 inset-x-0 bg-gray-900 text-white py-3 px-4 text-center text-sm z-50"
          >
            {t.iosTip}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Language Selection Modal (only if no language set yet) */}
      <AnimatePresence>
        {!lang && (
          <motion.div
            className="fixed inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              initial={{ scale: 0.85, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.85, opacity: 0 }}
              className="bg-white rounded-3xl shadow-2xl p-8 max-w-sm text-center"
            >
              <h2 className="text-2xl font-bold text-sky-700 mb-6">
                üåê {LANGS.en.chooseLang}
              </h2>
              <div className="flex flex-col gap-4">
                <button
                  onClick={() => chooseLanguage("en")}
                  className="px-6 py-3 rounded-xl bg-sky-600 hover:bg-sky-700 text-white font-semibold"
                >
                  English
                </button>
                <button
                  onClick={() => chooseLanguage("hi")}
                  className="px-6 py-3 rounded-xl bg-green-600 hover:bg-green-700 text-white font-semibold"
                >
                  ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä
                </button>
                <button
                  onClick={() => chooseLanguage("ta")}
                  className="px-6 py-3 rounded-xl bg-pink-600 hover:bg-pink-700 text-white font-semibold"
                >
                  ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {lang && (
        <>
          {/* Floating Language Switcher */}
          <div className="absolute top-6 right-6 z-40 flex items-center gap-2 bg-white border rounded-lg shadow-md px-3 py-1 hover:shadow-lg transition">
            <Globe className="w-4 h-4 text-sky-600" />
            <select
              value={lang}
              onChange={(e) => chooseLanguage(e.target.value)}
              className="bg-transparent focus:outline-none text-gray-700 font-medium cursor-pointer"
            >
              <option value="en">English</option>
              <option value="hi">‡§π‡§ø‡§®‡•ç‡§¶‡•Ä</option>
              <option value="ta">‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç</option>
            </select>
          </div>

          {/* Hero Section */}
          <section className="flex-1 flex flex-col justify-center items-center text-center px-6 py-24 relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-tr from-blue-200/40 to-sky-100/20 blur-3xl -z-10" />

            <motion.h1
              initial={{ opacity: 0, y: -30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.7 }}
              className="text-4xl sm:text-5xl md:text-6xl font-extrabold text-sky-700 leading-tight"

            >
              {t.appName}
            </motion.h1>

            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4 }}
              className="mt-6 text-lg sm:text-xl md:text-2xl text-gray-700 max-w-3xl"
            >
              {t.tagline}
            </motion.p>

            {/* CTA Buttons */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.7 }}
              className="mt-12 flex flex-col sm:flex-row gap-5"
            >
              <Link
                to="/login"
                className="px-6 py-3 rounded-xl font-semibold shadow-lg bg-sky-600 text-white hover:bg-sky-700 hover:scale-105 transition"
              >
                {t.login}
              </Link>
              <Link
                to="/register"
                className="px-6 py-3 rounded-xl font-semibold shadow-lg border border-sky-600 text-sky-700 hover:bg-sky-50 hover:scale-105 transition"
              >
                {t.register}
              </Link>
            </motion.div>

            {/* Guest Quick Access */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1 }}
              className="mt-14 w-full max-w-3xl bg-white/80 backdrop-blur-md rounded-2xl shadow-xl p-6"
            >
              <h3 className="text-lg font-semibold text-sky-700 mb-6">
                {t.quickAccess}
              </h3>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
                <button
                  onClick={() => enableGuestAndNavigate("/emergency")}
                  className="flex flex-col items-center justify-center p-6 rounded-xl bg-red-50 hover:bg-red-100 shadow-md hover:shadow-lg transition"
                >
                  <AlertTriangle className="text-red-500 mb-3" size={40} />
                  <span className="font-semibold text-gray-800">
                    {t.emergency}
                  </span>
                </button>

                <button
                  onClick={() => enableGuestAndNavigate("/symptoms")}
                  className="flex flex-col items-center justify-center p-6 rounded-xl bg-sky-50 hover:bg-sky-100 shadow-md hover:shadow-lg transition"
                >
                  <HeartPulse className="text-sky-500 mb-3" size={40} />
                  <span className="font-semibold text-gray-800">
                    {t.symptoms}
                  </span>
                </button>

                <button
                  onClick={() => enableGuestAndNavigate("/hospital")}
                  className="flex flex-col items-center justify-center p-6 rounded-xl bg-green-50 hover:bg-green-100 shadow-md hover:shadow-lg transition"
                >
                  <Hospital className="text-green-500 mb-3" size={40} />
                  <span className="font-semibold text-gray-800">
                    {t.hospital}
                  </span>
                </button>
              </div>
            </motion.div>
          </section>

          {/* Install Button */}
          <AnimatePresence>
            {showInstall && (
              <motion.button
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                onClick={handleInstall}
                className="fixed bottom-6 right-6 px-5 py-3 bg-sky-600 text-white font-semibold rounded-xl shadow-lg hover:bg-sky-700 hover:scale-105 transition z-50"
              >
                {t.install}
              </motion.button>
            )}
          </AnimatePresence>

          {/* Footer */}
          <footer className="bg-sky-700 text-white py-6 text-center text-sm">
            <p>
              ¬© {new Date().getFullYear()} {t.appName}.{" "}
              <span className="font-semibold">{t.footer}</span>.
            </p>
          </footer>
        </>
      )}
    </div>
  );
}
